
msladmin@xinshengw.partner.onmschina.cn
xinshengw.partner.onmschina.cn\msladmin
xinshengw.partner.onmschina.cn\mslavduser1


admin@xinshengw.partner.onmschina.cn


New-Item -ItemType Directory -Path "C:\Temp" -Force
Set-Location -Path "C:\Temp"
$Uri = "https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/CreateOrUpdateAzAutoAccount.ps1"
# Download the script
Invoke-WebRequest -Uri $Uri -OutFile ".\CreateOrUpdateAzAutoAccount.ps1"


$Params = @{
     "AADTenantId"           = "<Azure_Active_Directory_tenant_ID>"   # Optional. If not specified, it will use the current Azure context
     "SubscriptionId"        = "<Azure_subscription_ID>"              # Optional. If not specified, it will use the current Azure context
     "UseARMAPI"             = $true
     "ResourceGroupName"     = "<Resource_group_name>"                # Optional. Default: "WVDAutoScaleResourceGroup"
     "AutomationAccountName" = "<Automation_account_name>"            # Optional. Default: "WVDAutoScaleAutomationAccount"
     "Location"              = "<Azure_region_for_deployment>"
     "WorkspaceName"         = "<Log_analytics_workspace_name>"       # Optional. If specified, Log Analytics will be used to configure the custom log table that the runbook PowerShell script can send logs to
}

.\CreateOrUpdateAzAutoAccount.ps1 @Params



https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/basicScale.ps1

https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/runbookCreationTemplate.json




Connect-AzAccount -Environment AzureChinaCloud


New-Item -ItemType Directory -Path "C:\Temp" -Force
Set-Location -Path "C:\Temp"
$Uri = "https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/CreateOrUpdateAzLogicApp.ps1"
# Download the script
Invoke-WebRequest -Uri $Uri -OutFile ".\CreateOrUpdateAzLogicApp.ps1"


$LogAnalyticsWorkspaceId = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Workspace ID returned by when you created the Azure Automation account, otherwise leave it blank"
$LogAnalyticsPrimaryKey = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Primary Key returned by when you created the Azure Automation account, otherwise leave it blank"
$RecurrenceInterval = Read-Host -Prompt "Enter how often you'd like the job to run in minutes, e.g. '15'"
$BeginPeakTime = Read-Host -Prompt "Enter the start time for peak hours in local time, e.g. 9:00"
$EndPeakTime = Read-Host -Prompt "Enter the end time for peak hours in local time, e.g. 18:00"
$TimeDifference = Read-Host -Prompt "Enter the time difference between local time and UTC in hours, e.g. +5:30"
$SessionThresholdPerCPU = Read-Host -Prompt "Enter the maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
$MinimumNumberOfRDSH = Read-Host -Prompt "Enter the minimum number of session host VMs to keep running during off-peak hours"
$MaintenanceTagName = Read-Host -Prompt "Enter the name of the Tag associated with VMs you don't want to be managed by this scaling tool"
$LimitSecondsToForceLogOffUser = Read-Host -Prompt "Enter the number of seconds to wait before automatically signing out users. If set to 0, any session host VM that has user sessions, will be left untouched"
$LogOffMessageTitle = Read-Host -Prompt "Enter the title of the message sent to the user before they are forced to sign out"
$LogOffMessageBody = Read-Host -Prompt "Enter the body of the message sent to the user before they are forced to sign out"

$WebhookURI = Read-Host -Prompt "Enter the webhook URI that has already been generated for this Azure Automation account. The URI is stored as encrypted in the above Automation Account variable. To retrieve the value, see https://learn.microsoft.com/azure/automation/shared-resources/variables?tabs=azure-powershell#powershell-cmdlets-to-access-variables"




Write-Log "Number of user sessions: $nUserSessions of total allowed $($nRunningVMs * $HostPool.MaxSessionLimit)"


#[int]$MaxUserSessionsThresholdCapacity = [math]::Floor($nRunningVMs * $HostPool.MaxSessionLimit)




$Params = @{
	"AADTenantId"           = "71adee5d-7b4b-4e47-8814-ade2a984a543"
	"SubscriptionId"        = "15e95d2e-6cd0-4d1c-96da-b8e055a62ee8"
	"UseARMAPI"             = $true
	"ResourceGroupName"     = "mslavdrg"
	"AutomationAccountName" = "mslavdaa1new"
	"Location"              = "chinanorth3"
}

.\CreateOrUpdateAzAutoAccount.ps1 @Params






$AADTenantId = (Get-AzContext).Tenant.Id

$AzSubscription = Get-AzSubscription | Out-GridView -OutputMode:Single -Title "Select your Azure Subscription"
Select-AzSubscription -Subscription $AzSubscription.Id

$ResourceGroup = Get-AzResourceGroup | Out-GridView -OutputMode:Single -Title "Select the resource group for the new Azure Logic App"

$WVDHostPool = Get-AzResource -ResourceType "Microsoft.DesktopVirtualization/hostpools" | Out-GridView -OutputMode:Single -Title "Select the host pool you'd like to scale"

$LogAnalyticsWorkspaceId = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Workspace ID returned by when you created the Azure Automation account, otherwise leave it blank"
$LogAnalyticsPrimaryKey = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Primary Key returned by when you created the Azure Automation account, otherwise leave it blank"
$RecurrenceInterval = Read-Host -Prompt "Enter how often you'd like the job to run in minutes, e.g. '15'"
$BeginPeakTime = Read-Host -Prompt "Enter the start time for peak hours in local time, e.g. 9:00"
$EndPeakTime = Read-Host -Prompt "Enter the end time for peak hours in local time, e.g. 18:00"
$TimeDifference = Read-Host -Prompt "Enter the time difference between local time and UTC in hours, e.g. +5:30"
$SessionThresholdPerCPU = Read-Host -Prompt "Enter the maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
$MinimumNumberOfRDSH = Read-Host -Prompt "Enter the minimum number of session host VMs to keep running during off-peak hours"
$MaintenanceTagName = Read-Host -Prompt "Enter the name of the Tag associated with VMs you don't want to be managed by this scaling tool"
$LimitSecondsToForceLogOffUser = Read-Host -Prompt "Enter the number of seconds to wait before automatically signing out users. If set to 0, any session host VM that has user sessions, will be left untouched"
$LogOffMessageTitle = Read-Host -Prompt "Enter the title of the message sent to the user before they are forced to sign out"
$LogOffMessageBody = Read-Host -Prompt "Enter the body of the message sent to the user before they are forced to sign out"

$WebhookURI = Read-Host -Prompt "Enter the webhook URI that has already been generated for this Azure Automation account. The URI is stored as encrypted in the above Automation Account variable. To retrieve the value, see https://learn.microsoft.com/azure/automation/shared-resources/variables?tabs=azure-powershell#powershell-cmdlets-to-access-variables"

$Params = @{
     "AADTenantId"                   = "71adee5d-7b4b-4e47-8814-ade2a984a543"
     "SubscriptionID"                = "15e95d2e-6cd0-4d1c-96da-b8e055a62ee8"
     "ResourceGroupName"             = "mslavdrg"
     "Location"                      = "chinanorth3"
     "UseARMAPI"                     = $true
     "HostPoolName"                  = "mslavdhp1"
     "HostPoolResourceGroupName"     = "mslavdrg"
     "RecurrenceInterval"            = "1"
     "BeginPeakTime"                 = "00:00"
     "EndPeakTime"                   = "23:59"
     "TimeDifference"                = "+8:00"
     "WebhookURI"                    = "https://a8f48ec3-aec5-42de-b320-815ee490b0bb.webhook.cnn3.azure-automation.cn/webhooks?token=IONkEIL2buvBpJO6Uwixzf9DqrbpkUDYw%2fLbrvsvjfA%3d"
}

.\CreateOrUpdateAzLogicApp.ps1 @Params

Bwang0920



admin@xinshengw.partner.onmschina.cn
msadmin@xinshengw.partner.onmschina.cn
avduser1@xinshengw.partner.onmschina.cn
Microsoft2024


https://software-static.download.prss.microsoft.com/dbazure/988969d5-f34g-4e03-ac9d-1f9786c66749/22621.1.220506-1250.ni_release_amd64fre_CLIENT_LOF_PACKAGES_OEM.iso

avduser1@xinshengw.partner.onmschina.cn
avduser2@xinshengw.partner.onmschina.cn
avduser3@xinshengw.partner.onmschina.cn
avduser4@xinshengw.partner.onmschina.cn
avduser5@xinshengw.partner.onmschina.cn
avduser6@xinshengw.partner.onmschina.cn

Xinxin15@912

Desktop Virtualization Power On Off Contributor role

Service principal	Application ID
Azure Virtual Desktop
Windows Virtual Desktop 9cdead84-a844-4324-93f2-b2e6bb768d07 eb284803-c1d5-4598-97b9-e87e623de7ff

Azure Virtual Desktop Client
Windows Virtual Desktop Client a85cf173-4192-42f8-81fa-777a763e6e2c 178d36b2-0831-4ed1-86e1-d93a8235fc7d

Azure Virtual Desktop ARM Provider
Windows Virtual Desktop ARM Provider 50e95039-b200-4007-bc97-8d5790743a63 bfb4e646-2804-4ca9-ad6d-8da8d20577dc

az account list --output table
subId=xxxx
az role assignment create --assignee "9cdead84-a844-4324-93f2-b2e6bb768d07" --role "Desktop Virtualization Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "a85cf173-4192-42f8-81fa-777a763e6e2c" --role "Desktop Virtualization Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "50e95039-b200-4007-bc97-8d5790743a63" --role "Desktop Virtualization Contributor" --scope "/subscriptions/$subId"

az role assignment create --assignee "9cdead84-a844-4324-93f2-b2e6bb768d07" --role "Desktop Virtualization Power On Off Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "a85cf173-4192-42f8-81fa-777a763e6e2c" --role "Desktop Virtualization Power On Off Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "50e95039-b200-4007-bc97-8d5790743a63" --role "Desktop Virtualization Power On Off Contributor" --scope "/subscriptions/$subId"

developer portal 
policy


<rate-limit calls="number" renewal-period="seconds"  retry-after-header-name="custom header name, replaces default 'Retry-After'" 
        retry-after-variable-name="policy expression variable name"
        remaining-calls-header-name="header name"  
        remaining-calls-variable-name="policy expression variable name"
        total-calls-header-name="header name">
    <api name="API name" id="API id" calls="number" renewal-period="seconds" >
        <operation name="operation name" id="operation id" calls="number" renewal-period="seconds" />
    </api>
</rate-limit>


redis-cli -p 6379 -h yourcachename.redis.cache.windows.net -a YourAccessKey

redis-cli -p 6379 -h tpredis1.redis.cache.windows.net -a YourAccessKey
3b59055e-9266-4cbc-be91-425606f460b7

msadmin
Microsoft2024

只开不关，Breadth-first 可以有效保障业务高峰期的需求


WVDManagement 
| where UserName == '9cdead84-a844-4324-93f2-b2e6bb768d07' or UserName == 'a85cf173-4192-42f8-81fa-777a763e6e2c' or UserName == '50e95039-b200-4007-bc97-8d5790743a63'





echo "xinshengwang  ALL=(ALL) NOPASSWD: ALL" >>/etc/sudoers 

WVDManagement 
| where UserName == '9cdead84-a844-4324-93f2-b2e6bb768d07' or UserName == 'a85cf173-4192-42f8-81fa-777a763e6e2c' or UserName == '50e95039-b200-4007-bc97-8d5790743a63'



az storage queue list --account-name tplinksa1

az aks get-credentials --resource-group tprg --name tpaks1
az login --tenant 16b3c013-d300-468d-ac64-7eda0820b6d3


docker build -f docker-compose-quickstart.yml up -d


az vmss show \
    -g MC_tplinkrg_tplinkaks1_brazilsouth \
    -n aks-agentpool-22199431-vmss \
    --query virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].applicationSecurityGroups



az acr create --resource-group tplinkrg --name tplinkacr1 --sku Basic

docker pull registry.cn-hangzhou.aliyuncs.com/acr-toolkit/ack-cube:1.0

# Attach using acr-name
az aks update --name tplinkaks1 --resource-group tplinkrg --attach-acr tplinkacr1 
az acr import --name tplinkacr1 --source docker.io/library/nginx:latest --image nginx:latest

# Attach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-resource-id>


CONTAINER ID        IMAGE
f27fe74cfd0a        aks-store-demo-product-service
df1eaa137885        aks-store-demo-order-service
b3ce9e496e96        aks-store-demo-store-front
31df28627ffa        rabbitmq:3.13.2-management-alpine


apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: ack-cube #应用名称。
  labels:
    app: ack-cube
spec:
  replicas: 2 #设置副本数量。
  selector:
    matchLabels:
      app: ack-cube  #对应服务中Selector的值需要与其一致，才可以通过服务公开此应用。
  template:
    metadata:
      labels:
        app: ack-cube
    spec:
      containers:
      - name: ack-cube
        image: tplinkacr1.azurecr.io/samples/cube
        ports:
        - containerPort: 80 #需要在服务中暴露该端口。
        resources:
          limits: #设置资源限制。
            cpu: '1'
            memory: 1Gi
          requests: #设置所需资源
            cpu: 500m
            memory: 512Mi 

az acr import --name studyingacr1 --source ghcr.io/azure-samples/aks-store-demo/store-front:latest --image store-front:latest




az network public-ip create --name appgw1pip1 --resource-group studyingrg --allocation-method Static --sku Standard
az network application-gateway create --name appgw1 --resource-group studyingrg --sku Standard_v2 --public-ip-address appgw1pip1 --vnet-name studying-vnet1 --subnet APPGW --priority 100

appgwId=$(az network application-gateway show --name appgw1 --resource-group studyingrg -o tsv --query "id")
az aks enable-addons --name aks1 --resource-group studyingrg --addon ingress-appgw --appgw-id $appgwId
az aks approuting enable --resource-group studyingrg --name aks1



helm install oci://mcr.microsoft.com/azure-application-gateway/charts/ingress-azure  agic-controller --version 1.7.5 --namespace default --debug \
     --set appgw.name=appgw1 \
     --set appgw.resourceGroup=studyingrg \
     --set appgw.subscriptionId='15e95d2e-6cd0-4d1c-96da-b8e055a62ee8' \
     --set appgw.shared=false \
     --set armAuth.type=servicePrincipal \
     --set armAuth.secretJSON='' \
     --set rbac.enabled=true \
     --set verbosityLevel=3 \
     --set kubernetes.watchNamespace=default \
     --set aksClusterConfiguration.apiServerAddress=aks1-dns-n0g37ocg.hcp.chinanorth3.cx.prod.service.azk8s.cn

helm upgrade -i ingress-agic application-gateway-kubernetes-ingress/ingress-azure \
     --version 1.2.0-rc1 \
     --namespace default \
     --debug \
     --set appgw.name=appgw1 \
     --set appgw.resourceGroup=studyingrg \
     --set appgw.subscriptionId='15e95d2e-6cd0-4d1c-96da-b8e055a62ee8' \
     --set appgw.shared=false \
     --set appgw.usePrivateIP=false \
     --set armAuth.type=servicePrincipal \
     --set armAuth.secretJSON='' \
     --set rbac.enabled=true \
     --set verbosityLevel=3 \
     --set kubernetes.watchNamespace=default \
     --set aksClusterConfiguration.apiServerAddress='aks1-dns-n0g37ocg.hcp.chinanorth3.cx.prod.service.azk8s.cn'




az aks show -n aks1 -g studyingrg --query fqdn -o tsv
az identity create --name "userAssignedIdentityName" --resource-group "MC_studyingrg_aks1_chinanorth3" --subscription ""

resourceGroup="MC_studyingrg_aks1_chinanorth3"
identityName="userAssignedIdentityName"
az identity list -g $resourceGroup --query "[?name == '$identityName'].principalId | [0]" -o tsv


resourceGroup="MC_studyingrg_aks1_chinanorth3"
identityName="userAssignedIdentityName"
# Get the Application Gateway ID
AppGatewayID=$(az network application-gateway list --query '[].id' -o tsv)
role="contributor"
# Get the principal ID for the user-assigned identity
principalId=$(az identity list -g $resourceGroup --query "[?name == '$identityName'].principalId | [0]" -o tsv)
az role assignment create --assignee $principalId --role $role --scope $AppGatewayID







# This file contains the essential configs for the ingress controller helm chart

# Verbosity level of the App Gateway Ingress Controller
verbosityLevel: 3

################################################################################
# Specify which application gateway the ingress controller must manage
#
appgw:
    subscriptionId: 15e95d2e-6cd0-4d1c-96da-b8e055a62ee8
    resourceGroup: MC_studyingrg_aks1_chinanorth3
    name: <applicationGatewayName>

    # Setting appgw.shared to "true" creates an AzureIngressProhibitedTarget CRD.
    # This prohibits AGIC from applying config for any host/path.
    # Use "kubectl get AzureIngressProhibitedTargets" to view and change this.
    shared: false

################################################################################
# Specify which kubernetes namespace the ingress controller must watch
# Default value is "default"
# Leaving this variable out or setting it to blank or empty string would
# result in Ingress Controller observing all accessible namespaces.
#
# kubernetes:
#   watchNamespace: <namespace>

################################################################################
# Specify the authentication with Azure Resource Manager
#
# Two authentication methods are available:
# - Option 1: Azure-AD-workload-identity
armAuth:
    type: workloadIdentity
    identityClientID:  <identityClientId>

## Alternatively you can use Service Principal credentials
# armAuth:
#    type: servicePrincipal
#    secretJSON: <<Generate this value with: "az ad sp create-for-rbac --role Contributor --sdk-auth | base64 -w0" >>

################################################################################
# Specify if the cluster is Kubernetes RBAC enabled or not
rbac:
    enabled: false # true/false

# Specify aks cluster related information. THIS IS BEING DEPRECATED.
aksClusterConfiguration:
    apiServerAddress: <aks-api-server-address>



az provider register -n 'AllowApplicationGatewayTlsProxy'


az keyvault create --resource-group studyingrg --location chinanorth3 --name studyingkv1 --enable-rbac-authorization true
az keyvault certificate import --vault-name studyingkv1 --name serverpfx --file Certificates/server.pfx --password 
KEYVAULTID=$(az keyvault show --name studyingkv1 --query "id" --output tsv)
az aks approuting update --resource-group studyingrg --name aks1 --enable-kv --attach-kv ${KEYVAULTID}
az keyvault certificate show --vault-name studyingkv1 --name serverpfx --query "id" --output tsv


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: 
  name: aks-helloworld
  namespace: hello-web-app-routing
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: www.example.com
    http:
      paths:
      - backend:
          service:
            name: aks-helloworld
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - www.example.com
    secretName: keyvault-aks-helloworld





```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: studying
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: https://studyingkv1.vault.azure.cn/certificates/serverpfx
  name: aks-helloworld
  namespace: studying 
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: www.example.com
    http:
      paths:
      - backend:
          service:
            name: nginx-service
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - www.example.com
    secretName: keyvault-aks-helloworld

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: studying
spec:
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
```

Microsoft.Compute/virtualMachines/write
Microsoft.Network/networkInterfaces/write


az storage message get -q esakssaqueue1 --visibility-timeout 300 --account-name studyingsa1

az aks update --resource-group studyingrg --name publicaks1 --enable-cluster-autoscaler --min-count 1 --max-count 3

az aks update --resource-group tplinkrg --name tpaks1 --cluster-autoscaler-profile scale-down-utilization-threshold=0.1


az aks update --resource-group tplinkrg --name tpaks1 --cluster-autoscaler-profile scan-interval=30s,scale-down-delay-after-add=0m,scale-down-delay-after-failure=1m,scale-down-unneeded-time=3m,scale-down-unready-time=3m,max-graceful-termination-sec=30,skip-nodes-with-local-storage=false,max-empty-bulk-delete=1000,max-total-unready-percentage=100,ok-total-unready-count=1000,max-node-provision-time=15m,scale-down-utilization-threshold=0.1

az monitor diagnostic-settings create --name AKS-Diagnostics --resource /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myresourcegroup/providers/Microsoft.ContainerService/managedClusters/my-cluster --logs '[{"category": "kube-audit","enabled": true}, {"category": "kube-audit-admin", "enabled": true}, {"category": "kube-apiserver", "enabled": true}, {"category": "kube-controller-manager", "enabled": true}, {"category": "kube-scheduler", "enabled": true}, {"category": "cluster-autoscaler", "enabled": true}, {"category": "cloud-controller-manager", "enabled": true}, {"category": "guard", "enabled": true}, {"category": "csi-azuredisk-controller", "enabled": true}, {"category": "csi-azurefile-controller", "enabled": true}, {"category": "csi-snapshot-controller", "enabled": true}]'  --workspace /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/myresourcegroup/providers/microsoft.operationalinsights/workspaces/myworkspace --export-to-resource-specific true


GET https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}?api-version=2017-03-30


AzureDiagnostics
| where Category == "cluster-autoscaler"
|where log_s contains "virtualMachineScaleSets"
| sort by TimeGenerated

AzureDiagnostics
| where Category == "cluster-autoscaler"
| where log_s contains "remov"
| sort by TimeGenerated

aksehns1/aksautoscalereh1


az eventhubs eventhub create --resource-group studyingrg --namespace-name aksehns --name aksautoscalereh


azcopy copy 'https://hctssa1.blob.core.windows.net/bigfile/22621.1.220506-1250.ni_release_amd64fre_CLIENT_LOF_PACKAGES_OEM.iso?sv=2023-01-03&se=2025-01-08T11%3A52%3A18Z&sr=c&sp=rwl&sig=hhJDJMfFaV%2FYtMsSj%2BmWbDqDTGkR626ZpVGEBYSHiyc%3D' '/Users/xinsheng.wang/xinsheng/azcopy/iso' --log-level=INFO > azcopy-log.txt;


azcopy copy 'https://hctssa1.blob.core.windows.net/bigfile/PT1H.json?sv=2023-01-03&se=2025-01-08T11%3A52%3A18Z&sr=c&sp=rwl&sig=hhJDJMfFaV%2FYtMsSj%2BmWbDqDTGkR626ZpVGEBYSHiyc%3D' '/Users/xinsheng.wang/xinsheng/azcopy/PT1H.json' --log-level=INFO > azcopy-log.txt;


export AZCOPY_CRED_TYPE=Anonymous;
export AZCOPY_CONCURRENCY_VALUE=AUTO;
./azcopy copy "/Users/xinsheng.wang/Downloads/22621.1.220506-1250.ni_release_amd64fre_CLIENT_LOF_PACKAGES_OEM.iso" "https://hctssa1.blob.core.windows.net/bigfile/22621.1.220506-1250.ni_release_amd64fre_CLIENT_LOF_PACKAGES_OEM.iso?sv=2023-01-03&se=2025-01-08T11%3A52%3A18Z&sr=c&sp=rwl&sig=hhJDJMfFaV%2FYtMsSj%2BmWbDqDTGkR626ZpVGEBYSHiyc%3D" --overwrite=prompt --from-to=LocalBlob --blob-type Detect --follow-symlinks --check-length=true --put-md5 --follow-symlinks --disable-auto-decoding=false --recursive --log-level=INFO;
unset AZCOPY_CRED_TYPE;
unset AZCOPY_CONCURRENCY_VALUE;


azcopy copy azcopy-log.txt 'https://hctssa1.blob.core.windows.net/logfile/azcopy-logs.txt?sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2024-12-09T20:53:21Z&st=2024-12-09T12:53:21Z&spr=https&sig=STlfQ4yK1gf8L5m5A8z2rdVCCtBYPZgSwiEkBOiaxsU%3D' --follow-symlinks --check-length=true --put-md5 --follow-symlinks --disable-auto-decoding=false --recursive --log-level=INFO;

export AZCOPY_CRED_TYPE=Anonymous;
export AZCOPY_CONCURRENCY_VALUE=AUTO;
./azcopy copy "/Users/xinsheng.wang/Downloads/PT1H.json" "https://hctssa1.blob.core.windows.net/logfile/PT1H.json?sv=2023-01-03&se=2025-01-08T12%3A50%3A31Z&sr=c&sp=rwl&sig=lL1UuvK0jBDUjB3iBSvq6AtgAMk29Hl3HA0zqD4jupk%3D" --overwrite=prompt --from-to=LocalBlob --blob-type AppendBlob --follow-symlinks --check-length=true --put-md5 --follow-symlinks --disable-auto-decoding=false --recursive --log-level=INFO;
unset AZCOPY_CRED_TYPE;
unset AZCOPY_CONCURRENCY_VALUE;


dd if=/dev/vda of=/mnt/aliyunrhel79.raw bs=100M
dd if=/dev/zero of=fileimg bs=1M count=1000

az aks nodepool delete --resource-group hctrg --cluster-name hctaks1 --name userpool1
az aks nodepool add --resource-group hctrg --cluster-name hctaks1 --name userpool1 --node-count 3 --node-vm-size Standard_D4s_v3 --mode User --zones 3 --enable-ultra-ssd --no-wait

export AZCOPY_CONCURRENCY_VALUE=AUTO;
export AZCOPY_CRED_TYPE=Anonymous;
azcopy remove "https://hctssa1.blob.core.windows.net/logfile/azcopy-merged-log.txt?sv=2023-01-03&se=2025-01-08T14%3A27%3A50Z&sr=c&sp=rdl&sig=zOTDkbQt7TpOrRaQWUcc0eWXrm%2By2nV%2B%2Fl%2F%2FX90CIQk%3D" --delete-snapshots=include --from-to=BlobTrash --recursive --log-level=INFO;
unset AZCOPY_CONCURRENCY_VALUE;
unset AZCOPY_CRED_TYPE;


sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2024-12-14T08:25:50Z&st=2024-12-09T23:25:50Z&spr=https&sig=di7psXLARP0L7f7ZOd0PUbPQk56lhFQs0JdUXPtvsQE%3D

azcopy list 'https://hctssa1.blob.core.windows.net/logfile?sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2024-12-14T08:25:50Z&st=2024-12-09T23:25:50Z&spr=https&sig=di7psXLARP0L7f7ZOd0PUbPQk56lhFQs0JdUXPtvsQE%3D' --output-type=text > file-list.txt;



kubectl debug node/aks-userpool-65934306-vmss000003 -it --image=mcr.microsoft.com/cbl-mariner/busybox:2.0



azcopy copy "https://hctssa1.blob.core.windows.net/logfile/*?sv" .
cat azcopy-log-*.txt > azcopy-log-merged-log.txt
azcopy copy azcopy-log-merged-log.txt 'https://hctssa1.blob.core.windows.net/logfile/azcopy-merged-log.txt?sv'

apply
delete

kubectl apply -f azure-ultra-disk-sc-15g-500tp.yaml
kubectl apply -f azcopy-job-ultrassdpvc-15g.yaml
kubectl apply -f azcopy-job-ultrassdpv-15g.yaml

kubectl delete -f azure-ultra-disk-sc-1024g-2000tp.yaml
kubectl delete -f azcopy-job-ultrassdpvc-1024g.yaml
kubectl delete -f azcopy-job-ultrassdpv-1024g.yaml


# kubectl exec -it -nkube-system terway-eniip-xxxx -c policy -- cilium status --verbose
...
BPF Maps:   dynamic sizing: on (ratio: 0.002500)
  Name                          Size
  Auth                          524288
  Non-TCP connection tracking   65536
  TCP connection tracking       131072
  Endpoint policy               65535
...

kubectl exec nginx-deployment-576c6b7b6-2s59p -it -- ps aux

kubectl get events  --sort-by='.metadata.creationTimestamp'  -o 'go-template={{range .items}}{{.involvedObject.name}}{{"\t"}}{{.involvedObject.kind}}{{"\t"}}{{.message}}{{"\t"}}{{.reason}}{{"\t"}}{{.type}}{{"\t"}}{{.firstTimestamp}}{{"\n"}}{{end}}'

kubectl get events -o json "$@" | jq -r  '.items | map(. + {t: (.eventTime//.lastTimestamp)}) | sort_by(.t)[] | [.t, .metadata.namespace, .type, .reason, .involvedObject.kind + "/" + .involvedObject.name, .source.component + "," + (.source.host//"-"), .message] | @tsv' | column -s $'\t' -t

kubectl get events --field-selector involvedObject.name=nginx-deployment-576c6b7b6-mvhbg -o json | jq '.items[] | {reason, message, type, lastTimestamp}'

kubectl get events  --sort-by='.lastTimestamp' --field-selector involvedObject.kind=Pod


kubectl exec nginx-deployment-576c6b7b6-2s59p -it cat /proc/sys/net/netfilter/nf_conntrack_max


az acr import --name tpacr1 --source docker.io/library/chester2004/get-storage --image get-storage:latest --username theodorewxs --password 
docker pull centos:centos7.9.2009



# Include these variables to access key vault secrets from a pod in the cluster.
export KEYVAULT_NAME="keyvault-workload-id"
export KEYVAULT_SECRET_NAME="my-secret"

kubectl create ns podmi
kubectl config set-context --current --namespace=podmi
kubectl config view --minify

export RESOURCE_GROUP=tprg
export LOCATION="brazilsouth"
export CLUSTER_NAME="tpaks1"
export SERVICE_ACCOUNT_NAMESPACE="podmi"
export SERVICE_ACCOUNT_NAME="podmisa1"
export SUBSCRIPTION="$(az account show --query id --output tsv)"
export USER_ASSIGNED_IDENTITY_NAME="tpaks1podmi1"
export FEDERATED_IDENTITY_CREDENTIAL_NAME="tpaks1podfi1"
export AKS_OIDC_ISSUER="$(az aks show --name tpaks1 --resource-group tprg --query "oidcIssuerProfile.issuerUrl" --output tsv)"
export USER_ASSIGNED_CLIENT_ID="$(az identity show --resource-group tprg --name tpaks1podmi1 --query 'clientId' --output tsv)"

az aks update --resource-group tprg --name tpaks1 --enable-oidc-issuer --enable-workload-identity
export AKS_OIDC_ISSUER="$(az aks show --name tpaks1 --resource-group tprg --query "oidcIssuerProfile.issuerUrl" --output tsv)"
az identity create --name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --location "${LOCATION}" --subscription "${SUBSCRIPTION}"
export USER_ASSIGNED_CLIENT_ID="$(az identity show --resource-group tprg --name tpaks1podmi1 --query 'clientId' --output tsv)"

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: "${USER_ASSIGNED_CLIENT_ID}"
  name: "podmisa1"
  namespace: "podmi"
EOF

az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${AKS_OIDC_ISSUER}" --subject system:serviceaccount:"${SERVICE_ACCOUNT_NAMESPACE}":"${SERVICE_ACCOUNT_NAME}" --audience api://AzureADTokenExchange


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blob-reader
  namespace: podmi
  labels:
    azure.workload.identity/use: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blob-reader
  template:
    metadata:
      labels:
        app: blob-reader
    spec:
      serviceAccountName: podmisa1
      containers:
        - name: blob-reader
          image: mcr.microsoft.com/azure-cli
          command:
            - /bin/sh
            - -c
          args:
            - >
              while true; do
                az login --identity --username 548393f6-2f94; 
                az storage blob list --account-name tpsa1 --container-name data; 
                sleep 30;
              done

az login --identity --username e28fba50-a13d --debug


az login --identity --username <client_id|object_id|resource_id>


kubectl exec --stdin --tty get-storage-8584b5c548-8ktrd -- /bin/bash



curl -s -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/identity/oauth2/token?resource=https%3A%2F%2Fmanagement.core.windows.net%2F&api-version=2018-02-01&client_id=client_id" | jq

GET https://management.azure.com/subscriptions/subscriptionId/providers/Microsoft.ResourceHealth/events?api-version=2024-02-01&$filter=service eq 'Virtual Machines' or region eq 'West US'&queryStartTime=7/24/2020

token=$(az account get-access-token --resource=https://management.azure.com | jq -r .accessToken) 
curl -X GET --header "Authorization: Bearer $token" "https://management.azure.com/subscriptions//providers/Microsoft.ResourceHealth/events?api-version=2024-02-01&$filter=service\ eq\ 'Virtual Machines'&queryStartTime=1/1/2025"

GET https://management.azure.com/subscriptions//providers/Microsoft.ResourceHealth/events?api-version=2024-02-01&$filter=service eq 'Virtual Machines' or region eq 'West US'&queryStartTime=7/24/2020
curl -X GET --header "Authorization: Bearer $token" "https://management.azure.com/subscriptions//providers/Microsoft.ResourceHealth/events?api-version=2024-02-01&$filter=service%20eq%20'Virtual%20Machines'%20or%20region%20eq%20'Brazil%20South'&queryStartTime=1/1/2025"
curl -X GET --header "Authorization: Bearer $token" "https://management.azure.com/subscriptions//resourceGroups/tprg/providers/Microsoft.Compute/virtualMachines/d2v5vm1/providers/Microsoft.ResourceHealth/events?api-version=2024-02-01"

az aks connection create storage-blob --workload-identity <user-identity-resource-id>
az aks connection create storage-blob --workload-identity 

GET https://management.azure.com/subscriptions/ /resourceGroups/rhctestenv/providers/Microsoft.Compute/virtualMachines/rhctestenvV1PI/providers/Microsoft.ResourceHealth/events?api-version=2024-02-01



cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: Pod
metadata:
  name: sample-workload-identity
  namespace: ${SERVICE_ACCOUNT_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
spec:
  serviceAccountName: ${SERVICE_ACCOUNT_NAME}
  containers:
    - image: mcr.microsoft.com/azure-cli
      name: azure-cli
      ports:
        - containerPort: 80
EOF


apiVersion: apps/v1
kind: Deployment
metadata:
  name: get-storage
  labels:
    app: get-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: get-storage
  template:
    metadata:
      labels:
        app: get-storage
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: podmisa1
      containers:
        - name: get-storage
          image: chester2004/get-storage
          ports:
            - containerPort: 8080

GET http://10.11.0.19:8080/api/tpsa1/data/198712.txt



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blob-reader
  namespace: podmi
  labels:
    azure.workload.identity/use: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blob-reader
  template:
    metadata:
      labels:
        app: blob-reader
    spec:
      serviceAccountName: podmisa1
      containers:
        - name: blob-reader
          image: mcr.microsoft.com/azure-cli
          command:
            - /bin/sh
            - -c
          args:
            - >
              while true; do
                sleep 30;
              done

apiVersion: apps/v1
kind: Deployment
metadata:
  name: blob-reader
  labels:
    app: blob-reader
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blob-reader
  template:
    metadata:
      labels:
        app: blob-reader
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: podmisa1
      containers:
        - name: blob-reader
          image: mcr.microsoft.com/azure-cli
          command:
            - /bin/sh
            - -c
          args:
            - >
              while true; do
                sleep 30;
              done



az storage blob list --account-name tpsa1 --container-name data --auth-mode login


az aks show --name tpaks1 --resource-group tprg --query identity.type --output tsv
az aks show --resource-group tprg --name tpaks1 --query "identity"


f3AB2bzaforAAWQb


server {
    listen              443 ssl;
    server_name         www.example.com;
    ssl_certificate     /home/azureuser/server.cer;
    ssl_certificate_key /home/azureuser/server.key;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
}

az network application-gateway show --resource-group tprg --name tpappgw1 -otable
az network application-gateway stop --resource-group tprg --name tpappgw1
az network application-gateway start --resource-group tprg --name tpappgw1 

cn2spoke -- cn2hub --- cn3hub -- cn3spoke

local -- cn3spoke???? 

dscn3hubvnet1 10.21.0.0/16
dscn3spokevnet1 10.22.0.0/16
dscn2hubvnet1 10.31.0.0/16
dscn2spokevnet1 10.32.0.0/16

dscn3hubvnet1-peering-to-dscn3spokevnet1
dscn3spokevnet1-peering-to-dscn3hubvnet1
dscn2hubvnet1-peering-to-dscn2spokevnet1
dscn2spokevnet1-peering-to-dscn3hubvnet1


az network vnet-gateway show -g dsrg -n dscn3hubvnet1vng1

az network vnet subnet create --vnet-name dscn2spokevnet1 -n GatewaySubnet -g dsrg --address-prefix 10.23.1.0/24
az network public-ip create --name dscn2spokevnet1vng1pip1 --resource-group dsrg --location chinanorth2 --allocation-method Static --sku Standard --version IPv4
az network public-ip delete -g dsrg -n dscn2spokevnet1vng1pip1
az network vnet-gateway create --name dscn2spokevnet1vng1 --location chinanorth2 --public-ip-addresses dscn2spokevnet1vng1pip1 --resource-group dsrg --vnet dscn2spokevnet1 --gateway-type Vpn --vpn-type RouteBased --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait
az network vnet-gateway delete -g dsrg -n dscn2spokevnet1vng1 --no-wait
az network vnet-gateway show -g dsrg -n dscn2spokevnet1vng1

az network vnet subnet create --vnet-name dscn3spokevnet1 -n GatewaySubnet -g dsrg --address-prefix 10.22.1.0/24
az network public-ip create --name dscn3spokevnet1vng1pip1 --resource-group dsrg --location chinanorth3 --allocation-method Static --sku Standard --version IPv4
az network public-ip delete -g dsrg -n dscn3spokevnet1vng1pip1
az network vnet-gateway create --name dscn3spokevnet1vng1 --location chinanorth3 --public-ip-addresses dscn3spokevnet1vng1pip1 --resource-group dsrg --vnet dscn3spokevnet1 --gateway-type Vpn --vpn-type RouteBased --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait
az network vnet-gateway delete -g dsrg -n dscn3spokevnet1vng1 --no-wait
az network vnet-gateway show -g dsrg -n dscn3spokevnet1vng1

az network vnet subnet create --vnet-name dscn2hubvnet1 -n GatewaySubnet -g dsrg --address-prefix 10.31.1.0/24
az network public-ip create --name dscn2hubvnet1vng1pip1 --resource-group dsrg --location chinanorth2 --allocation-method Static --sku Standard --version IPv4
az network public-ip delete -g dsrg -n dscn3spokevnet1vng1pip1
az network vnet-gateway create --name dscn2hubvnet1vng1 --location chinanorth2 --public-ip-addresses dscn2hubvnet1vng1pip1 --resource-group dsrg --vnet dscn2hubvnet1 --gateway-type Vpn --vpn-type RouteBased --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait
az network vnet-gateway delete -g dsrg -n dscn2hubvnet1vng1 --no-wait
az network vnet-gateway show -g dsrg -n dscn2hubvnet1vng1



Any region that doesn't have a paired region


就是在21v部署global的这个镜像 Silver Peak Unity EdgeConnect 9.2.4.0 - x64 Gen1
Microsoft2025
Source image publisher silver-peak-systems
Source image offer silver_peak_edgeconnect
Source image planedgeconnect_9_2_4_0_94650


subscriptionId=
targetSnapshotName=rocky1osss1
sourceSnapshotResourceId=
targetRegion=chinanorth3


az disk show -g silver -n rocky1_OsDisk_1_18effa4179254acc91aa97bd165d96a9 --query id --output tsv


ResourceGroupName=silver
snapshotName=rocky1_OsDisk_SS1

ResourceGroupName=rockyrg
targetStorageAccountName=rockysa1
imageStorageContainerName=rockyss
imageBlobName="rocky1_OsDisk.vhd"
snapshotSasUrl="


snapshotName="rockyosss1"
az snapshot create -g rockyrg -n $snapshotName -l chinanorth3 --source-storage-account-id  --source 
az snapshot create -g MyResourceGroup -n MySnapshot --source 

az vm create \
  --resource-group rockyrg \
  --name rocky1 \
  --image /subscriptions//resourceGroups/rockyrg/providers/Microsoft.Compute/images/rockyimage1 \
  --size Standard_D2as_v5 --plan-name rocky-linux-8_5 --plan-product rocky_linux_8_5 --plan-publisher yungoalbj
  
az image create --resource-group rockyrg --name rockyimage1 --source  --os-type  Linux --location chinanorth3


az vm show --name vm1 --resource-group silver --query 'networkProfile.networkInterfaces[].id' --output tsv



AzureUser
Microsoft2025

az vm list-usage --location eastus2 --output table

az login
subscriptionId=$(az account show --query id --output tsv)
az ad sp create-for-rbac -n "hciboxsp1" --role "Owner" --scopes /subscriptions/$subscriptionId

{


az login
subscriptionId=$(az account show --query id --output tsv)
az ad sp create-for-rbac -n "jshbsp1" --role "Owner" --scopes /subscriptions/$subscriptionId


/subscriptions/ /resourceGroups/tprg/providers/Microsoft.Network/applicationGateways/tpappgw1
appgwId=$(az network application-gateway show --name tpappgw1 --resource-group tprg -o tsv --query "id") 
az aks enable-addons --name tpaks1 --resource-group tprg --addon ingress-appgw --appgw-id $appgwId

az aks disable-addons -n tpaks1 -g tprg -a ingress-appgw

AKS_NAME='tpaks1'
RESOURCE_GROUP='tprg'
LOCATION="brazilsouth"
IDENTITY_RESOURCE_NAME='tpaks1agic-identity1'

APPGW_NAME="tpappgw1"
APPGW_SUBNET_NAME="APPGW"

nodeResourceGroup=$(az aks show -n $AKS_NAME -g $RESOURCE_GROUP -o tsv --query "nodeResourceGroup")
aksVnetName=$(az network vnet list -g $nodeResourceGroup -o tsv --query "[0].name")
aksVnetId=$(az network vnet show -n $aksVnetName -g $nodeResourceGroup -o tsv --query "id")
az network vnet subnet create \
    --resource-group $nodeResourceGroup  \
    --vnet-name $aksVnetName \
    --name $APPGW_SUBNET_NAME \
    --address-prefixes "10.226.0.0/23"

APPGW_SUBNET_ID="/subscriptions//resourceGroups/tprg/providers/Microsoft.Network/virtualNetworks/tpvnet1/subnets/APPGW"


az network application-gateway create \
  --name tpappgw2 \
  --location $LOCATION \
  --resource-group $RESOURCE_GROUP \
  --subnet $APPGW_SUBNET_ID \
  --capacity 2 \
  --sku Standard_v2 \
  --http-settings-cookie-based-affinity Disabled \
  --frontend-port 80 \
  --http-settings-port 80 \
  --http-settings-protocol Http \
  --public-ip-address tpappgw2-pip \
  --priority 10

APPGW_ID=$(az network application-gateway show --name $APPGW_NAME --resource-group $RESOURCE_GROUP --query "id" --output tsv)




echo "Creating identity $IDENTITY_RESOURCE_NAME in resource group $RESOURCE_GROUP"
az identity create --resource-group $RESOURCE_GROUP --name $IDENTITY_RESOURCE_NAME
IDENTITY_PRINCIPAL_ID="$(az identity show -g $RESOURCE_GROUP -n $IDENTITY_RESOURCE_NAME --query principalId -otsv)"
IDENTITY_CLIENT_ID="$(az identity show -g $RESOURCE_GROUP -n $IDENTITY_RESOURCE_NAME --query clientId -otsv)"

echo "Waiting 60 seconds to allow for replication of the identity..."
sleep 60

echo "Set up federation with AKS OIDC issuer"
AKS_OIDC_ISSUER="$(az aks show -n "$AKS_NAME" -g "$RESOURCE_GROUP" --query "oidcIssuerProfile.issuerUrl" -o tsv)"
az identity federated-credential create --name "agic" \
    --identity-name "$IDENTITY_RESOURCE_NAME" \
    --resource-group $RESOURCE_GROUP \
    --issuer "$AKS_OIDC_ISSUER" \
    --subject "system:serviceaccount:default:ingress-azure"

resourceGroupId=$(az group show --name $RESOURCE_GROUP --query id -otsv)
nodeResourceGroup=$(az aks show -n $AKS_NAME -g $RESOURCE_GROUP -o tsv --query "nodeResourceGroup")
nodeResourceGroupId=$(az group show --name $nodeResourceGroup --query id -otsv)

echo "Apply role assignments to AGIC identity"
az role assignment create --assignee-object-id $IDENTITY_PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $resourceGroupId --role "Reader"
az role assignment create --assignee-object-id $IDENTITY_PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $nodeResourceGroupId --role "Contributor"
az role assignment create --assignee-object-id $IDENTITY_PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $APPGW_ID --role "Contributor"

/subscriptions/ /resourceGroups/tprg/providers/Microsoft.Network/applicationGateways/tpappgw1
/subscriptions/ /resourceGroups/tprg/providers/Microsoft.Network/applicationGateways/tpappgw2

APPGW_ID=/subscriptions/ /resourceGroups/tprg/providers/Microsoft.Network/applicationGateways/tpappgw1

helm install azure-application-gateway-tpappgw1 --namespace tpappgw1agic \
  oci://mcr.microsoft.com/azure-application-gateway/charts/ingress-azure \
  --set appgw.applicationGatewayID=$APPGW_ID \
  --set armAuth.type=workloadIdentity \
  --set armAuth.identityClientID=$IDENTITY_CLIENT_ID \
  --set rbac.enabled=true \
  --version 1.7.3



apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: azure-application-gateway
  labels:
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    meta.helm.sh/release-name: "ingress-azure"
    meta.helm.sh/release-namespace: "default"
spec:
  controller: azure/application-gateway
  parameters:
    appgw.applicationGatewayID: "/subscriptions//resourceGroups/tprg/providers/Microsoft.Network/applicationGateways/tpappgw1"
    armAuth.type: workloadIdentity
    armAuth.identityClientID: ""
    rbac.enabled: "true"



apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: azure-application-gateway-tpappgw1
  labels:
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    meta.helm.sh/release-name: "ingress-azure"
    meta.helm.sh/release-namespace: "tpappgw1agic"
spec:
  controller: azure/application-gateway-tpappgw1
  parameters:
    apiVersion: v1
    kind: ConfigMap
    name: azure-application-gateway--tpappgw1-config
    namespace: tpappgw1agic
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: azure-application-gateway-tpappgw1-config
  namespace: tpappgw1agic
data:
  appgw.applicationGatewayID: "/subscriptions//resourceGroups/tprg/providers/Microsoft.Network/applicationGateways/tpappgw1"
  armAuth.type: workloadIdentity
  armAuth.identityClientID: ""
  rbac.enabled: "true"


















# ingressclass-tpappgw1.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: azure-application-gateway-tpappgw1
  labels:
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    meta.helm.sh/release-name: "azure-application-gateway-tpappgw1"
    meta.helm.sh/release-namespace: "tpappgw1agic"
spec:
  controller: azure/application-gateway
  parameters:
    apiGroup: v1
    kind: ConfigMap
    name: azure-application-gateway-tpappgw1-config
---
# configmap-tpappgw1.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: azure-application-gateway-tpappgw1-config
  namespace: tpappgw1agic
data:
  appgw.applicationGatewayID: "/subscriptions/your-subscription-id/resourceGroups/your-resource-group/providers/Microsoft.Network/applicationGateways/your-public-appgw"
  armAuth.type: workloadIdentity
  armAuth.identityClientID: "your-public-client-id"
  rbac.enabled: "true"


# configmap-public.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: agic-public-config
  namespace: default
data:
  appgw.applicationGatewayID: "/subscriptions/your-subscription-id/resourceGroups/your-resource-group/providers/Microsoft.Network/applicationGateways/your-public-appgw"
  armAuth.type: workloadIdentity
  armAuth.identityClientID: "your-public-client-id"
  rbac.enabled: "true"
---
# configmap-private.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: agic-private-config
  namespace: default
data:
  appgw.applicationGatewayID: "/subscriptions/your-subscription-id/resourceGroups/your-resource-group/providers/Microsoft.Network/applicationGateways/your-private-appgw"
  armAuth.type: workloadIdentity
  armAuth.identityClientID: "your-private-client-id"
  rbac.enabled: "true"






