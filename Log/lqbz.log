
msladmin@xinshengw.partner.onmschina.cn
xinshengw.partner.onmschina.cn\msladmin
xinshengw.partner.onmschina.cn\mslavduser1


admin@xinshengw.partner.onmschina.cn


New-Item -ItemType Directory -Path "C:\Temp" -Force
Set-Location -Path "C:\Temp"
$Uri = "https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/CreateOrUpdateAzAutoAccount.ps1"
# Download the script
Invoke-WebRequest -Uri $Uri -OutFile ".\CreateOrUpdateAzAutoAccount.ps1"


$Params = @{
     "AADTenantId"           = "<Azure_Active_Directory_tenant_ID>"   # Optional. If not specified, it will use the current Azure context
     "SubscriptionId"        = "<Azure_subscription_ID>"              # Optional. If not specified, it will use the current Azure context
     "UseARMAPI"             = $true
     "ResourceGroupName"     = "<Resource_group_name>"                # Optional. Default: "WVDAutoScaleResourceGroup"
     "AutomationAccountName" = "<Automation_account_name>"            # Optional. Default: "WVDAutoScaleAutomationAccount"
     "Location"              = "<Azure_region_for_deployment>"
     "WorkspaceName"         = "<Log_analytics_workspace_name>"       # Optional. If specified, Log Analytics will be used to configure the custom log table that the runbook PowerShell script can send logs to
}

.\CreateOrUpdateAzAutoAccount.ps1 @Params



https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/basicScale.ps1

https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/runbookCreationTemplate.json




Connect-AzAccount -Environment AzureChinaCloud


New-Item -ItemType Directory -Path "C:\Temp" -Force
Set-Location -Path "C:\Temp"
$Uri = "https://raw.githubusercontent.com/Azure/RDS-Templates/master/wvd-templates/wvd-scaling-script/CreateOrUpdateAzLogicApp.ps1"
# Download the script
Invoke-WebRequest -Uri $Uri -OutFile ".\CreateOrUpdateAzLogicApp.ps1"


$LogAnalyticsWorkspaceId = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Workspace ID returned by when you created the Azure Automation account, otherwise leave it blank"
$LogAnalyticsPrimaryKey = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Primary Key returned by when you created the Azure Automation account, otherwise leave it blank"
$RecurrenceInterval = Read-Host -Prompt "Enter how often you'd like the job to run in minutes, e.g. '15'"
$BeginPeakTime = Read-Host -Prompt "Enter the start time for peak hours in local time, e.g. 9:00"
$EndPeakTime = Read-Host -Prompt "Enter the end time for peak hours in local time, e.g. 18:00"
$TimeDifference = Read-Host -Prompt "Enter the time difference between local time and UTC in hours, e.g. +5:30"
$SessionThresholdPerCPU = Read-Host -Prompt "Enter the maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
$MinimumNumberOfRDSH = Read-Host -Prompt "Enter the minimum number of session host VMs to keep running during off-peak hours"
$MaintenanceTagName = Read-Host -Prompt "Enter the name of the Tag associated with VMs you don't want to be managed by this scaling tool"
$LimitSecondsToForceLogOffUser = Read-Host -Prompt "Enter the number of seconds to wait before automatically signing out users. If set to 0, any session host VM that has user sessions, will be left untouched"
$LogOffMessageTitle = Read-Host -Prompt "Enter the title of the message sent to the user before they are forced to sign out"
$LogOffMessageBody = Read-Host -Prompt "Enter the body of the message sent to the user before they are forced to sign out"

$WebhookURI = Read-Host -Prompt "Enter the webhook URI that has already been generated for this Azure Automation account. The URI is stored as encrypted in the above Automation Account variable. To retrieve the value, see https://learn.microsoft.com/azure/automation/shared-resources/variables?tabs=azure-powershell#powershell-cmdlets-to-access-variables"




Write-Log "Number of user sessions: $nUserSessions of total allowed $($nRunningVMs * $HostPool.MaxSessionLimit)"


#[int]$MaxUserSessionsThresholdCapacity = [math]::Floor($nRunningVMs * $HostPool.MaxSessionLimit)




$Params = @{
	"AADTenantId"           = "71adee5d-7b4b-4e47-8814-ade2a984a543"
	"SubscriptionId"        = "15e95d2e-6cd0-4d1c-96da-b8e055a62ee8"
	"UseARMAPI"             = $true
	"ResourceGroupName"     = "mslavdrg"
	"AutomationAccountName" = "mslavdaa1new"
	"Location"              = "chinanorth3"
}

.\CreateOrUpdateAzAutoAccount.ps1 @Params






$AADTenantId = (Get-AzContext).Tenant.Id

$AzSubscription = Get-AzSubscription | Out-GridView -OutputMode:Single -Title "Select your Azure Subscription"
Select-AzSubscription -Subscription $AzSubscription.Id

$ResourceGroup = Get-AzResourceGroup | Out-GridView -OutputMode:Single -Title "Select the resource group for the new Azure Logic App"

$WVDHostPool = Get-AzResource -ResourceType "Microsoft.DesktopVirtualization/hostpools" | Out-GridView -OutputMode:Single -Title "Select the host pool you'd like to scale"

$LogAnalyticsWorkspaceId = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Workspace ID returned by when you created the Azure Automation account, otherwise leave it blank"
$LogAnalyticsPrimaryKey = Read-Host -Prompt "If you want to use Log Analytics, enter the Log Analytics Primary Key returned by when you created the Azure Automation account, otherwise leave it blank"
$RecurrenceInterval = Read-Host -Prompt "Enter how often you'd like the job to run in minutes, e.g. '15'"
$BeginPeakTime = Read-Host -Prompt "Enter the start time for peak hours in local time, e.g. 9:00"
$EndPeakTime = Read-Host -Prompt "Enter the end time for peak hours in local time, e.g. 18:00"
$TimeDifference = Read-Host -Prompt "Enter the time difference between local time and UTC in hours, e.g. +5:30"
$SessionThresholdPerCPU = Read-Host -Prompt "Enter the maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
$MinimumNumberOfRDSH = Read-Host -Prompt "Enter the minimum number of session host VMs to keep running during off-peak hours"
$MaintenanceTagName = Read-Host -Prompt "Enter the name of the Tag associated with VMs you don't want to be managed by this scaling tool"
$LimitSecondsToForceLogOffUser = Read-Host -Prompt "Enter the number of seconds to wait before automatically signing out users. If set to 0, any session host VM that has user sessions, will be left untouched"
$LogOffMessageTitle = Read-Host -Prompt "Enter the title of the message sent to the user before they are forced to sign out"
$LogOffMessageBody = Read-Host -Prompt "Enter the body of the message sent to the user before they are forced to sign out"

$WebhookURI = Read-Host -Prompt "Enter the webhook URI that has already been generated for this Azure Automation account. The URI is stored as encrypted in the above Automation Account variable. To retrieve the value, see https://learn.microsoft.com/azure/automation/shared-resources/variables?tabs=azure-powershell#powershell-cmdlets-to-access-variables"

$Params = @{
     "AADTenantId"                   = "71adee5d-7b4b-4e47-8814-ade2a984a543"
     "SubscriptionID"                = "15e95d2e-6cd0-4d1c-96da-b8e055a62ee8"
     "ResourceGroupName"             = "mslavdrg"
     "Location"                      = "chinanorth3"
     "UseARMAPI"                     = $true
     "HostPoolName"                  = "mslavdhp1"
     "HostPoolResourceGroupName"     = "mslavdrg"
     "RecurrenceInterval"            = "1"
     "BeginPeakTime"                 = "00:00"
     "EndPeakTime"                   = "23:59"
     "TimeDifference"                = "+8:00"
     "WebhookURI"                    = "https://a8f48ec3-aec5-42de-b320-815ee490b0bb.webhook.cnn3.azure-automation.cn/webhooks?token=IONkEIL2buvBpJO6Uwixzf9DqrbpkUDYw%2fLbrvsvjfA%3d"
}

.\CreateOrUpdateAzLogicApp.ps1 @Params

Bwang0920



admin@xinshengw.partner.onmschina.cn
msadmin@xinshengw.partner.onmschina.cn
avduser1@xinshengw.partner.onmschina.cn
Microsoft2024


https://software-static.download.prss.microsoft.com/dbazure/988969d5-f34g-4e03-ac9d-1f9786c66749/22621.1.220506-1250.ni_release_amd64fre_CLIENT_LOF_PACKAGES_OEM.iso

avduser1@xinshengw.partner.onmschina.cn
avduser2@xinshengw.partner.onmschina.cn
avduser3@xinshengw.partner.onmschina.cn
avduser4@xinshengw.partner.onmschina.cn
avduser5@xinshengw.partner.onmschina.cn
avduser6@xinshengw.partner.onmschina.cn

Xinxin15@912

Desktop Virtualization Power On Off Contributor role

Service principal	Application ID
Azure Virtual Desktop
Windows Virtual Desktop 9cdead84-a844-4324-93f2-b2e6bb768d07 eb284803-c1d5-4598-97b9-e87e623de7ff

Azure Virtual Desktop Client
Windows Virtual Desktop Client a85cf173-4192-42f8-81fa-777a763e6e2c 178d36b2-0831-4ed1-86e1-d93a8235fc7d

Azure Virtual Desktop ARM Provider
Windows Virtual Desktop ARM Provider 50e95039-b200-4007-bc97-8d5790743a63 bfb4e646-2804-4ca9-ad6d-8da8d20577dc

az account list --output table
subId=xxxx
az role assignment create --assignee "9cdead84-a844-4324-93f2-b2e6bb768d07" --role "Desktop Virtualization Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "a85cf173-4192-42f8-81fa-777a763e6e2c" --role "Desktop Virtualization Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "50e95039-b200-4007-bc97-8d5790743a63" --role "Desktop Virtualization Contributor" --scope "/subscriptions/$subId"

az role assignment create --assignee "9cdead84-a844-4324-93f2-b2e6bb768d07" --role "Desktop Virtualization Power On Off Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "a85cf173-4192-42f8-81fa-777a763e6e2c" --role "Desktop Virtualization Power On Off Contributor" --scope "/subscriptions/$subId"
az role assignment create --assignee "50e95039-b200-4007-bc97-8d5790743a63" --role "Desktop Virtualization Power On Off Contributor" --scope "/subscriptions/$subId"

developer portal 
policy


<rate-limit calls="number" renewal-period="seconds"  retry-after-header-name="custom header name, replaces default 'Retry-After'" 
        retry-after-variable-name="policy expression variable name"
        remaining-calls-header-name="header name"  
        remaining-calls-variable-name="policy expression variable name"
        total-calls-header-name="header name">
    <api name="API name" id="API id" calls="number" renewal-period="seconds" >
        <operation name="operation name" id="operation id" calls="number" renewal-period="seconds" />
    </api>
</rate-limit>


redis-cli -p 6379 -h yourcachename.redis.cache.windows.net -a YourAccessKey

redis-cli -p 6379 -h tpredis1.redis.cache.windows.net -a YourAccessKey
3b59055e-9266-4cbc-be91-425606f460b7

msadmin
Microsoft2024

只开不关，Breadth-first 可以有效保障业务高峰期的需求


WVDManagement 
| where UserName == '9cdead84-a844-4324-93f2-b2e6bb768d07' or UserName == 'a85cf173-4192-42f8-81fa-777a763e6e2c' or UserName == '50e95039-b200-4007-bc97-8d5790743a63'





echo "xinshengwang  ALL=(ALL) NOPASSWD: ALL" >>/etc/sudoers 

WVDManagement 
| where UserName == '9cdead84-a844-4324-93f2-b2e6bb768d07' or UserName == 'a85cf173-4192-42f8-81fa-777a763e6e2c' or UserName == '50e95039-b200-4007-bc97-8d5790743a63'



az storage queue list --account-name tplinksa1

az aks get-credentials --resource-group studyingrg --name aks1
az login --tenant 16b3c013-d300-468d-ac64-7eda0820b6d3
az aks get-credentials --resource-group tplinkrg --name tpaks1
az eventhubs namespace create --name tp-ehns1 --resource-group tplinkrg --sku Premium
az eventhubs eventhub create --name tpehns1aks1 --resource-group tplinkrg --namespace-name 'tp-ehns1' --partition-count 1

az eventhubs namespace delete --name tp-ehns1 --resource-group tplinkrg --sku Premium
az eventhubs eventhub delete --name tpehns1aks1 --resource-group tplinkrg --namespace-name 'tp-ehns1'

az eventhubs eventhub list --resource-group tplinkrg --namespace-name 'tp-ehns1' -o table



az aks update --resource-group tplinkrg --name tpaks1 --cluster-autoscaler-profile scan-interval=30s,scale-down-delay-after-add=0m,scale-down-delay-after-failure=1m,scale-down-unneeded-time=3m,scale-down-unready-time=3m,max-graceful-termination-sec=30,skip-nodes-with-local-storage=false,max-empty-bulk-delete=1000,max-total-unready-percentage=100,ok-total-unready-count=1000,max-node-provision-time=15m,scale-down-utilization-threshold=0.1



az vmss show \
    -g MC_tplinkrg_tplinkaks1_brazilsouth \
    -n aks-agentpool-22199431-vmss \
    --query virtualMachineProfile.networkProfile.networkInterfaceConfigurations[].applicationSecurityGroups

wangxin4@tp-link.com.hk


az acr create --resource-group tplinkrg --name tplinkacr1 --sku Basic

docker pull registry.cn-hangzhou.aliyuncs.com/acr-toolkit/ack-cube:1.0

# Attach using acr-name
az aks update --name tplinkaks1 --resource-group tplinkrg --attach-acr tplinkacr1 
az acr import --name tplinkacr1 --source docker.io/library/nginx:latest --image nginx:latest

# Attach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-resource-id>


CONTAINER ID        IMAGE
f27fe74cfd0a        aks-store-demo-product-service
df1eaa137885        aks-store-demo-order-service
b3ce9e496e96        aks-store-demo-store-front
31df28627ffa        rabbitmq:3.13.2-management-alpine


apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: ack-cube #应用名称。
  labels:
    app: ack-cube
spec:
  replicas: 2 #设置副本数量。
  selector:
    matchLabels:
      app: ack-cube  #对应服务中Selector的值需要与其一致，才可以通过服务公开此应用。
  template:
    metadata:
      labels:
        app: ack-cube
    spec:
      containers:
      - name: ack-cube
        image: tplinkacr1.azurecr.io/samples/cube
        ports:
        - containerPort: 80 #需要在服务中暴露该端口。
        resources:
          limits: #设置资源限制。
            cpu: '1'
            memory: 1Gi
          requests: #设置所需资源
            cpu: 500m
            memory: 512Mi 

az acr import --name studyingacr1 --source ghcr.io/azure-samples/aks-store-demo/store-front:latest --image store-front:latest




az network public-ip create --name appgw1pip1 --resource-group studyingrg --allocation-method Static --sku Standard
az network application-gateway create --name appgw1 --resource-group studyingrg --sku Standard_v2 --public-ip-address appgw1pip1 --vnet-name studying-vnet1 --subnet APPGW --priority 100

appgwId=$(az network application-gateway show --name appgw1 --resource-group studyingrg -o tsv --query "id")
az aks enable-addons --name aks1 --resource-group studyingrg --addon ingress-appgw --appgw-id $appgwId
az aks approuting enable --resource-group studyingrg --name aks1



helm install oci://mcr.microsoft.com/azure-application-gateway/charts/ingress-azure  agic-controller --version 1.7.5 --namespace default --debug \
     --set appgw.name=appgw1 \
     --set appgw.resourceGroup=studyingrg \
     --set appgw.subscriptionId='15e95d2e-6cd0-4d1c-96da-b8e055a62ee8' \
     --set appgw.shared=false \
     --set armAuth.type=servicePrincipal \
     --set armAuth.secretJSON='' \
     --set rbac.enabled=true \
     --set verbosityLevel=3 \
     --set kubernetes.watchNamespace=default \
     --set aksClusterConfiguration.apiServerAddress=aks1-dns-n0g37ocg.hcp.chinanorth3.cx.prod.service.azk8s.cn

helm upgrade -i ingress-agic application-gateway-kubernetes-ingress/ingress-azure \
     --version 1.2.0-rc1 \
     --namespace default \
     --debug \
     --set appgw.name=appgw1 \
     --set appgw.resourceGroup=studyingrg \
     --set appgw.subscriptionId='15e95d2e-6cd0-4d1c-96da-b8e055a62ee8' \
     --set appgw.shared=false \
     --set appgw.usePrivateIP=false \
     --set armAuth.type=servicePrincipal \
     --set armAuth.secretJSON='' \
     --set rbac.enabled=true \
     --set verbosityLevel=3 \
     --set kubernetes.watchNamespace=default \
     --set aksClusterConfiguration.apiServerAddress='aks1-dns-n0g37ocg.hcp.chinanorth3.cx.prod.service.azk8s.cn'




az aks show -n aks1 -g studyingrg --query fqdn -o tsv
az identity create --name "userAssignedIdentityName" --resource-group "MC_studyingrg_aks1_chinanorth3" --subscription ""

resourceGroup="MC_studyingrg_aks1_chinanorth3"
identityName="userAssignedIdentityName"
az identity list -g $resourceGroup --query "[?name == '$identityName'].principalId | [0]" -o tsv


resourceGroup="MC_studyingrg_aks1_chinanorth3"
identityName="userAssignedIdentityName"
# Get the Application Gateway ID
AppGatewayID=$(az network application-gateway list --query '[].id' -o tsv)
role="contributor"
# Get the principal ID for the user-assigned identity
principalId=$(az identity list -g $resourceGroup --query "[?name == '$identityName'].principalId | [0]" -o tsv)
az role assignment create --assignee $principalId --role $role --scope $AppGatewayID







# This file contains the essential configs for the ingress controller helm chart

# Verbosity level of the App Gateway Ingress Controller
verbosityLevel: 3

################################################################################
# Specify which application gateway the ingress controller must manage
#
appgw:
    subscriptionId: 15e95d2e-6cd0-4d1c-96da-b8e055a62ee8
    resourceGroup: MC_studyingrg_aks1_chinanorth3
    name: <applicationGatewayName>

    # Setting appgw.shared to "true" creates an AzureIngressProhibitedTarget CRD.
    # This prohibits AGIC from applying config for any host/path.
    # Use "kubectl get AzureIngressProhibitedTargets" to view and change this.
    shared: false

################################################################################
# Specify which kubernetes namespace the ingress controller must watch
# Default value is "default"
# Leaving this variable out or setting it to blank or empty string would
# result in Ingress Controller observing all accessible namespaces.
#
# kubernetes:
#   watchNamespace: <namespace>

################################################################################
# Specify the authentication with Azure Resource Manager
#
# Two authentication methods are available:
# - Option 1: Azure-AD-workload-identity
armAuth:
    type: workloadIdentity
    identityClientID:  <identityClientId>

## Alternatively you can use Service Principal credentials
# armAuth:
#    type: servicePrincipal
#    secretJSON: <<Generate this value with: "az ad sp create-for-rbac --role Contributor --sdk-auth | base64 -w0" >>

################################################################################
# Specify if the cluster is Kubernetes RBAC enabled or not
rbac:
    enabled: false # true/false

# Specify aks cluster related information. THIS IS BEING DEPRECATED.
aksClusterConfiguration:
    apiServerAddress: <aks-api-server-address>



az provider register -n 'AllowApplicationGatewayTlsProxy'


az keyvault create --resource-group studyingrg --location chinanorth3 --name studyingkv1 --enable-rbac-authorization true
az keyvault certificate import --vault-name studyingkv1 --name serverpfx --file Certificates/server.pfx --password 
KEYVAULTID=$(az keyvault show --name studyingkv1 --query "id" --output tsv)
az aks approuting update --resource-group studyingrg --name aks1 --enable-kv --attach-kv ${KEYVAULTID}
az keyvault certificate show --vault-name studyingkv1 --name serverpfx --query "id" --output tsv


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: 
  name: aks-helloworld
  namespace: hello-web-app-routing
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: www.example.com
    http:
      paths:
      - backend:
          service:
            name: aks-helloworld
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - www.example.com
    secretName: keyvault-aks-helloworld





```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  namespace: studying
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: https://studyingkv1.vault.azure.cn/certificates/serverpfx
  name: aks-helloworld
  namespace: studying 
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: www.example.com
    http:
      paths:
      - backend:
          service:
            name: nginx-service
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - www.example.com
    secretName: keyvault-aks-helloworld

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: studying
spec:
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
```

Microsoft.Compute/virtualMachines/write
Microsoft.Network/networkInterfaces/write


az storage message get -q esakssaqueue1 --visibility-timeout 300 --account-name studyingsa1

az aks update --resource-group studyingrg --name publicaks1 --enable-cluster-autoscaler --min-count 1 --max-count 3

az aks update --resource-group studyingrg --name publicaks1 --cluster-autoscaler-profile scale-down-utilization-threshold=0.1


az aks update --resource-group studyingrg --name publicaks1 --cluster-autoscaler-profile scan-interval=30s,scale-down-delay-after-add=0m,scale-down-delay-after-failure=1m,scale-down-unneeded-time=3m,scale-down-unready-time=3m,max-graceful-termination-sec=30,skip-nodes-with-local-storage=false,max-empty-bulk-delete=1000,max-total-unready-percentage=100,ok-total-unready-count=1000,max-node-provision-time=15m,scale-down-utilization-threshold=0.1

az monitor diagnostic-settings create --name AKS-Diagnostics --resource /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myresourcegroup/providers/Microsoft.ContainerService/managedClusters/my-cluster --logs '[{"category": "kube-audit","enabled": true}, {"category": "kube-audit-admin", "enabled": true}, {"category": "kube-apiserver", "enabled": true}, {"category": "kube-controller-manager", "enabled": true}, {"category": "kube-scheduler", "enabled": true}, {"category": "cluster-autoscaler", "enabled": true}, {"category": "cloud-controller-manager", "enabled": true}, {"category": "guard", "enabled": true}, {"category": "csi-azuredisk-controller", "enabled": true}, {"category": "csi-azurefile-controller", "enabled": true}, {"category": "csi-snapshot-controller", "enabled": true}]'  --workspace /subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/myresourcegroup/providers/microsoft.operationalinsights/workspaces/myworkspace --export-to-resource-specific true


GET https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}/ipconfigurations/{ipConfigurationName}/publicipaddresses/{publicIpAddressName}?api-version=2017-03-30


AzureDiagnostics
| where Category == "cluster-autoscaler"
|where log_s contains "virtualMachineScaleSets"
| sort by TimeGenerated

AzureDiagnostics
| where Category == "cluster-autoscaler"
| where log_s contains "remov"
| sort by TimeGenerated

aksehns1/aksautoscalereh1


